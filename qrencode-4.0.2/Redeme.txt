//用法如下

#include <windows.h>
#include <QByteArray>
#include <QDateTime>
#include <QFile>
#include "qrencode.h"

namespace {
    bool QRcodeGenerateBmp(const std::string& src_str, const std::string& dst_bmp_path)
    {
        const char* szSourceSring = src_str.c_str();
        const char* szBmpPath = dst_bmp_path.c_str();
        unsigned int unWidth, unWidthAdjusted, unDataBytes = 0;
        unsigned char*  pRGBData, *pSourceData, *pDestData = nullptr;
        QRcode* pQRC = nullptr;
        FILE* f = nullptr;

        if (pQRC = QRcode_encodeString(szSourceSring, 0, QR_ECLEVEL_H, QR_MODE_8, 1))
        {
            unWidth = pQRC->width;
            unWidthAdjusted = unWidth * 8 * 3;
            if (unWidthAdjusted % 4)
                unWidthAdjusted = (unWidthAdjusted / 4 + 1) * 4;
            unDataBytes = unWidthAdjusted * unWidth * 8;

            // Allocate pixels buffer
            if (!(pRGBData = (unsigned char*)malloc(unDataBytes)))
            {
                return false;
            }

            // Preset to white
            memset(pRGBData, 0xff, unDataBytes);

            // Prepare bmp headers
            BITMAPFILEHEADER kFileHeader;
            kFileHeader.bfType = 0x4d42;  // "BM"
            kFileHeader.bfSize = sizeof(BITMAPFILEHEADER) +
                sizeof(BITMAPINFOHEADER) +
                unDataBytes;
            kFileHeader.bfReserved1 = 0;
            kFileHeader.bfReserved2 = 0;
            kFileHeader.bfOffBits = sizeof(BITMAPFILEHEADER) +
                sizeof(BITMAPINFOHEADER);

            BITMAPINFOHEADER kInfoHeader;
            kInfoHeader.biSize = sizeof(BITMAPINFOHEADER);
            kInfoHeader.biWidth = unWidth * 8;
            kInfoHeader.biHeight = -((int)unWidth * 8);
            kInfoHeader.biPlanes = 1;
            kInfoHeader.biBitCount = 24;
            kInfoHeader.biCompression = BI_RGB;
            kInfoHeader.biSizeImage = 0;
            kInfoHeader.biXPelsPerMeter = 0;
            kInfoHeader.biYPelsPerMeter = 0;
            kInfoHeader.biClrUsed = 0;
            kInfoHeader.biClrImportant = 0;

            // Convert QrCode bits to bmp pixels
            pSourceData = pQRC->data;
            unsigned int x, y, l, n = 0;
            for (y = 0; y < unWidth; y++)
            {
                pDestData = pRGBData + unWidthAdjusted * y * 8;
                for (x = 0; x < unWidth; x++)
                {
                    if (*pSourceData & 1)
                    {
                        for (l = 0; l < 8; l++)
                        {
                            for (n = 0; n < 8; n++)
                            {
                                *(pDestData + n * 3 + unWidthAdjusted * l) = 0x00;
                                *(pDestData + 1 + n * 3 + unWidthAdjusted * l) = 0x00;
                                *(pDestData + 2 + n * 3 + unWidthAdjusted * l) = 0x00;
                            }
                        }
                    }
                    pDestData += 3 * 8;
                    pSourceData++;
                }
            }

            // Output the bmp file
            errno_t err = fopen_s(&f, szBmpPath, "wb");
            if (err == 0)
            {
                fwrite(&kFileHeader, sizeof(BITMAPFILEHEADER), 1, f);
                fwrite(&kInfoHeader, sizeof(BITMAPINFOHEADER), 1, f);
                fwrite(pRGBData, sizeof(unsigned char), unDataBytes, f);

                fclose(f);
            }
            else
            {
                return false;
            }

            // Free data
            free(pRGBData);
            QRcode_free(pQRC);
        }
        else
        {
            return false;
        }
        return true;
    }
}

QPixmap GenerateQRcode(const QString& url)
{
    QPixmap pixmap;
    QString bmpPath = QString("%1/%2.bmp").arg(QString::fromStdWString(FileSystem::GetTempDirPath()))
        .arg(QDateTime::currentMSecsSinceEpoch());
    if (QRcodeGenerateBmp(url.toStdString(), bmpPath.toStdString()))
    {
        QImage image;
        if (image.load(bmpPath))
        {
            pixmap = QPixmap::fromImage(image);
            if (!pixmap.isNull())
            {
                pixmap = pixmap.scaled(QSize(m_ui.label_image->width(), m_ui.label_image->width()));
            }
        }
        QFile::remove(bmpPath);
    }
    return pixmap;
}